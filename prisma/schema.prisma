// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String?
  role      Role     @default(USER)
  
  // Profile fields - all optional to preserve existing data
  profileImage     String?
  bio              String?
  phone            String?
  address          String?
  city             String?
  state            String?
  country          String?
  zipCode          String?
  dateOfBirth      DateTime?
  occupation       String?
  church           String?
  memberSince      DateTime?
  facebookUrl      String?
  twitterUrl       String?
  instagramUrl     String?
  linkedinUrl      String?
  website          String?
  preferredContact String?  @default("email")
  emailNotifications Boolean @default(true)
  smsNotifications   Boolean @default(false)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  blogPosts BlogPost[]
  userBlogPosts UserBlogPost[]  // User-created public blogs
  events    Event[]
  passwordResetTokens PasswordResetToken[]
  blogPostViews BlogPostView[]
  blogPostLikes BlogPostLike[]
  userBlogLikes UserBlogLike[]  // Likes on user-created blogs
  engagements UserEngagement[]
  comments BlogComment[]
  userBlogComments UserBlogComment[]  // Comments on user-created blogs
  commentLikes CommentLike[]
  commentReports CommentReport[]
  blogBookmarks BlogBookmark[]  // Church blog bookmarks
  userBlogBookmarks UserBlogBookmark[]  // Community blog bookmarks
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
  
  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([token])
  @@index([userId])
}

model DailyVerse {
  id        String   @id @default(cuid())
  verse     String
  reference String
  date      DateTime @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BlogPost {
  id              String      @id @default(cuid())
  title           String
  slug            String      @unique
  content         String      // Rich text content (HTML)
  excerpt         String?
  metaDescription String?     // For SEO
  imageUrl        String?     // Featured image
  published       Boolean     @default(false)
  featured        Boolean     @default(false)
  tags            String[]
  categoryId      String?     // Changed from enum to relation
  contentType     ContentType @default(HTML)
  authorId        String
  authorName      String?     // Custom author name, falls back to user.name if not set
  memberId        String?     // Reference to Member who authored this post
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  // Relations
  author   User @relation(fields: [authorId], references: [id])
  member   Member? @relation("MemberAuthoredPosts", fields: [memberId], references: [id])
  category BlogCategory? @relation(fields: [categoryId], references: [id])
  views    BlogPostView[]
  likes    BlogPostLike[]
  stats    BlogPostStats?
  engagements UserEngagement[]
  comments BlogComment[]
  bookmarks BlogBookmark[]
}

model BlogCategory {
  id          String     @id @default(cuid())
  name        String     @unique
  slug        String     @unique
  description String?
  color       String?    // For UI theming
  order       Int        @default(0)
  active      Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relations
  blogPosts BlogPost[]
}

model Doctrine {
  id          String      @id @default(cuid())
  title       String
  content     String      // Rich text content (HTML)
  category    String
  order       Int         @default(0)
  published   Boolean     @default(true)
  contentType ContentType @default(HTML)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Event {
  id          String    @id @default(cuid())
  title       String
  description String
  date        DateTime
  time        String
  location    String
  image       String?
  maxAttendees Int?
  published   Boolean   @default(true)
  authorId    String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  author User @relation(fields: [authorId], references: [id])
  rsvps  EventRSVP[]
}

model EventRSVP {
  id      String @id @default(cuid())
  eventId String
  name    String
  email   String
  phone   String?
  message String?
  createdAt DateTime @default(now())

  // Relations
  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@unique([eventId, email])
}

model Gallery {
  id          String   @id @default(cuid())
  title       String
  description String?
  imageUrl    String
  category    String   @default("general")
  eventDate   DateTime?
  published   Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model SabbathSchedule {
  id          String   @id @default(cuid())
  date        DateTime @unique
  theme       String
  speaker     String
  scripture   String?
  notes       String?
  published   Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Sermon {
  id          String   @id @default(cuid())
  title       String
  speaker     String
  date        DateTime
  scripture   String?
  description String?
  videoUrl    String?
  audioUrl    String?
  transcript  String?
  published   Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Ministry {
  id          String   @id @default(cuid())
  name        String
  description String
  leader      String?
  meetingTime String?
  location    String?
  image       String?
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model PrayerRequest {
  id        String      @id @default(cuid())
  name      String
  email     String?
  request   String
  isPublic  Boolean     @default(false)
  status    PrayerStatus @default(ACTIVE)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model Testimonial {
  id        String   @id @default(cuid())
  name      String
  content   String
  image     String?
  published Boolean  @default(false)
  featured  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Volunteer {
  id          String   @id @default(cuid())
  name        String
  email       String
  phone       String?
  ministry    String
  availability String?
  skills      String?
  message     String?
  status      VolunteerStatus @default(PENDING)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Position {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  color       String   @default("#3b82f6") // Default blue color
  order       Int      @default(0)
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  members Member[]
}

model Member {
  id          String   @id @default(cuid())
  firstName   String
  lastName    String
  email       String?  @unique
  phone       String?
  bio         String?
  imageUrl    String?
  positionId  String?
  active      Boolean  @default(true)
  featured    Boolean  @default(false) // For highlighting key members
  joinDate    DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  position     Position? @relation(fields: [positionId], references: [id])
  authoredPosts BlogPost[] @relation("MemberAuthoredPosts")

  @@index([positionId])
  @@index([active])
}

enum Role {
  USER
  ADMIN
}


enum PrayerStatus {
  ACTIVE
  ANSWERED
  ARCHIVED
}

enum VolunteerStatus {
  PENDING
  APPROVED
  CONTACTED
  DECLINED
}

enum ContentType {
  HTML
  MARKDOWN
  PLAIN_TEXT
}

model ContactMessage {
  id         String        @id @default(cuid())
  firstName  String
  lastName   String
  email      String
  phone      String?
  subject    String
  message    String
  status     MessageStatus @default(UNREAD)
  starred    Boolean       @default(false)
  archived   Boolean       @default(false)
  notes      String?       // Admin notes about the message
  repliedAt  DateTime?     // When the message was replied to
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt

  @@index([status])
  @@index([starred])
  @@index([archived])
  @@index([createdAt])
}

enum MessageStatus {
  UNREAD
  READ
  REPLIED
  PENDING
}

enum CommentStatus {
  PENDING
  APPROVED
  REJECTED
  FLAGGED
}

enum DonationStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  REFUNDED
  CANCELLED
}

enum PaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
  BANK_TRANSFER
  GCASH
  PAYPAL
  OTHER
}

enum RecurringFrequency {
  WEEKLY
  BIWEEKLY
  MONTHLY
  QUARTERLY
  YEARLY
}

model SiteSettings {
  id              String   @id @default(cuid()) // Should only have one entry
  siteName        String?
  logoUrl         String?
  contactAddress  String?
  contactPhone    String?
  contactEmail    String?
  adminEmails     String[] @default([]) // Array of admin emails for notifications
  facebookUrl     String?
  twitterUrl      String?
  youtubeUrl      String?
  tiktokUrl       String?
  liveStreamUrl   String?  // URL for live streaming (Facebook Live, YouTube, etc.)
  liveStreamActive Boolean @default(false) // Whether live stream is currently active
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Donation {
  id                    String              @id @default(cuid())
  transactionId         String              @unique
  stripePaymentIntentId String?             @unique
  stripeCustomerId      String?
  stripeSubscriptionId  String?
  
  // Donation details
  amount                Decimal             @db.Decimal(10, 2)
  currency              String              @default("USD")
  category              String
  paymentMethod         PaymentMethod
  status                DonationStatus      @default(PENDING)
  
  // Donor information
  firstName             String
  lastName              String
  email                 String
  phone                 String?
  address               String?
  city                  String?
  state                 String?
  zipCode               String?
  country               String              @default("USA")
  
  // Recurring donation fields
  isRecurring           Boolean             @default(false)
  recurringFrequency    RecurringFrequency?
  recurringStartDate    DateTime?
  recurringEndDate      DateTime?
  recurringStatus       String?
  
  // Additional information
  message               String?
  isAnonymous           Boolean             @default(false)
  taxDeductible         Boolean             @default(true)
  receiptSent           Boolean             @default(false)
  receiptSentAt         DateTime?
  
  // Security and tracking
  ipAddress             String?
  userAgent             String?
  referrerUrl           String?
  sessionId             String?
  
  // Processing details
  processedAt           DateTime?
  failureReason         String?
  refundedAt            DateTime?
  refundAmount          Decimal?            @db.Decimal(10, 2)
  refundReason          String?
  
  // Metadata
  metadata              Json?
  
  // Timestamps
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  
  // Relations
  receipts              DonationReceipt[]
  recurringLogs         RecurringDonationLog[] @relation("OriginalDonation")
  executedFromLog       RecurringDonationLog[] @relation("ExecutedDonation")
  
  @@index([email])
  @@index([status])
  @@index([category])
  @@index([createdAt])
  @@index([isRecurring])
  @@index([stripeCustomerId])
}

model BlogPostView {
  id           String    @id @default(cuid())
  blogPostId   String
  userId       String?   // NULL for anonymous views
  sessionId    String    // Track anonymous sessions
  ipAddress    String
  userAgent    String?
  referrer     String?
  country      String?
  city         String?
  viewDuration Int?      // Time spent on page in seconds
  isBot        Boolean   @default(false)
  createdAt    DateTime  @default(now())

  // Relations
  blogPost     BlogPost  @relation(fields: [blogPostId], references: [id], onDelete: Cascade)
  user         User?     @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([blogPostId])
  @@index([userId])
  @@index([sessionId])
  @@index([ipAddress])
  @@index([createdAt])
}

model BlogPostLike {
  id         String   @id @default(cuid())
  blogPostId String
  userId     String
  createdAt  DateTime @default(now())

  // Relations
  blogPost   BlogPost @relation(fields: [blogPostId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([blogPostId, userId])
  @@index([blogPostId])
  @@index([userId])
}

model BlogPostStats {
  id              String    @id @default(cuid())
  blogPostId      String    @unique
  totalViews      Int       @default(0)
  uniqueViews     Int       @default(0)
  registeredViews Int       @default(0)
  anonymousViews  Int       @default(0)
  totalLikes      Int       @default(0)
  avgViewDuration Float?
  lastViewedAt    DateTime?
  dailyViews      Json?     @default("{}") // Store daily view counts
  hourlyViews     Json?     @default("{}") // Store hourly view counts for last 24 hours
  updatedAt       DateTime  @updatedAt

  // Relations
  blogPost        BlogPost  @relation(fields: [blogPostId], references: [id], onDelete: Cascade)
}

model UserEngagement {
  id          String   @id @default(cuid())
  userId      String?
  sessionId   String
  blogPostId  String
  scrollDepth Float?   // Percentage of page scrolled (0-100)
  timeOnPage  Int?     // Time in seconds
  clicks      Int?     @default(0)
  shares      Int?     @default(0)
  comments    Int?     @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user        User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  blogPost    BlogPost @relation(fields: [blogPostId], references: [id], onDelete: Cascade)

  @@unique([sessionId, blogPostId])
  @@index([userId])
  @@index([sessionId])
  @@index([blogPostId])
}

model RateLimit {
  id          String   @id @default(cuid())
  identifier  String   // IP address or userId
  action      String   // 'view', 'like', etc.
  count       Int      @default(1)
  windowStart DateTime @default(now())
  createdAt   DateTime @default(now())

  @@index([identifier, action, windowStart])
}

model DonationReceipt {
  id            String   @id @default(cuid())
  donationId    String
  receiptNumber String   @unique
  receiptUrl    String?
  sentTo        String
  sentAt        DateTime @default(now())
  createdAt     DateTime @default(now())
  
  // Relations
  donation      Donation @relation(fields: [donationId], references: [id], onDelete: Cascade)
  
  @@index([donationId])
}

model RecurringDonationLog {
  id                  String    @id @default(cuid())
  originalDonationId  String
  executedDonationId  String?
  scheduledDate       DateTime
  executedAt          DateTime?
  status              String
  errorMessage        String?
  createdAt           DateTime  @default(now())
  
  // Relations
  originalDonation    Donation  @relation("OriginalDonation", fields: [originalDonationId], references: [id], onDelete: Cascade)
  executedDonation    Donation? @relation("ExecutedDonation", fields: [executedDonationId], references: [id], onDelete: SetNull)
  
  @@index([originalDonationId])
  @@index([scheduledDate])
}

// Comment System Models - Added for blog interaction
model BlogComment {
  id         String        @id @default(cuid())
  content    String        // The comment text
  blogPostId String        // Which blog post this comment belongs to
  userId     String        // Who wrote the comment
  parentId   String?       // For nested replies
  status     CommentStatus @default(APPROVED) // Moderation status
  isEdited   Boolean       @default(false)
  editedAt   DateTime?
  likes      Int           @default(0)
  isPinned   Boolean       @default(false) // Admin can pin important comments
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt

  // Relations
  blogPost   BlogPost      @relation(fields: [blogPostId], references: [id], onDelete: Cascade)
  user       User          @relation(fields: [userId], references: [id])
  parent     BlogComment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies    BlogComment[] @relation("CommentReplies")
  commentLikes CommentLike[]
  reports    CommentReport[]

  @@index([blogPostId])
  @@index([userId])
  @@index([parentId])
  @@index([status])
  @@index([createdAt])
}

model CommentLike {
  id         String      @id @default(cuid())
  commentId  String
  userId     String
  createdAt  DateTime    @default(now())

  // Relations
  comment    BlogComment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([commentId, userId])
  @@index([commentId])
  @@index([userId])
}

model CommentReport {
  id          String      @id @default(cuid())
  commentId   String
  userId      String      // Who reported
  reason      String      // spam, inappropriate, offensive, etc.
  description String?     // Additional details
  status      String      @default("PENDING") // PENDING, RESOLVED, DISMISSED
  resolvedAt  DateTime?
  resolvedBy  String?     // Admin who resolved
  createdAt   DateTime    @default(now())

  // Relations
  comment     BlogComment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user        User        @relation(fields: [userId], references: [id])

  @@index([commentId])
  @@index([userId])
  @@index([status])
}

// User-created blog posts for public blogs feature
model UserBlogPost {
  id              String      @id @default(cuid())
  title           String
  slug            String      @unique
  content         String      // Rich text content (HTML)
  excerpt         String?
  coverImage      String?     // Featured image
  published       Boolean     @default(false)
  tags            String[]
  authorId        String
  viewCount       Int         @default(0)
  likeCount       Int         @default(0)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  publishedAt     DateTime?

  // Relations
  author   User @relation(fields: [authorId], references: [id], onDelete: Cascade)
  likes    UserBlogLike[]
  comments UserBlogComment[]
  bookmarks UserBlogBookmark[]

  @@index([authorId])
  @@index([published])
  @@index([slug])
  @@index([createdAt])
}

model UserBlogLike {
  id             String       @id @default(cuid())
  userBlogPostId String
  userId         String
  createdAt      DateTime     @default(now())

  // Relations
  userBlogPost   UserBlogPost @relation(fields: [userBlogPostId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userBlogPostId, userId])
  @@index([userBlogPostId])
  @@index([userId])
}

model UserBlogComment {
  id             String          @id @default(cuid())
  content        String          // The comment text
  userBlogPostId String          // Which user blog post this comment belongs to
  userId         String          // Who wrote the comment
  parentId       String?         // For nested replies
  likes          Int             @default(0)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt

  // Relations
  userBlogPost   UserBlogPost    @relation(fields: [userBlogPostId], references: [id], onDelete: Cascade)
  user           User            @relation(fields: [userId], references: [id])
  parent         UserBlogComment?  @relation("UserBlogCommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies        UserBlogComment[] @relation("UserBlogCommentReplies")

  @@index([userBlogPostId])
  @@index([userId])
  @@index([parentId])
  @@index([createdAt])
}

// Bookmark models for saving blog posts
model BlogBookmark {
  id         String   @id @default(cuid())
  blogPostId String
  userId     String
  createdAt  DateTime @default(now())

  // Relations
  blogPost   BlogPost @relation(fields: [blogPostId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([blogPostId, userId])
  @@index([userId])
  @@index([blogPostId])
  @@index([createdAt])
}

model UserBlogBookmark {
  id             String       @id @default(cuid())
  userBlogPostId String
  userId         String
  createdAt      DateTime     @default(now())

  // Relations
  userBlogPost   UserBlogPost @relation(fields: [userBlogPostId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userBlogPostId, userId])
  @@index([userId])
  @@index([userBlogPostId])
  @@index([createdAt])
}
